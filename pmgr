#!/bin/bash

####Automation of Projects####


##Dependency: jq
##TODO: Include in Makefile/Installscript

##New Command for Whole thing
function pmgr (){

	##############################################
	####Defining base strings for localization####
	##############################################
	export TEXTDOMAINDIR
	export TEXTDOMAIN

	#########################################
	##Defining all needed Variables Locally##
	#########################################
	
	local ddir
	local cfgf
	local cfgd
	local GH_User
	local GH_Token
	local projectdir
	local maineditor
	local secondaryeditor
	local setup
	local priv
	local quiet
	local edit

	###########################
	##Variable Reset Function##
	###########################

	function resetArgs () {
		priv=true
		quiet=false
		edit=false
	}

	#####################################################
	##Setup Functions for getting Variables from Config##
	#####################################################
	function setenv() {
		#Get Documents folder
		local _ddir=$(grep -i DOCUMENTS_DIR ~/.config/user-dirs.dirs)
		IFS=\/ read -a dDir <<<"$_ddir"
		
		#Adding values to Variables
		ddir=${dDir[1]//\"/}
		TEXTDOMAINDIR="$HOME/$ddir/Projects/.Config/locale"
		TEXTDOMAIN="pmgr"
		cfgf="$HOME/$ddir/Projects/.Config/config.json"
		cfgd="$HOME/$ddir/Projects/.Config"
		setup=false
		priv=true
		quiet=false
		edit=false
		
		unset _ddir
		unset dDir
	
	}

	#Initial Checks befor launching Pmgr
	function psetup() {
		#Set all variables
		setenv

		#Continue with Setup
		if [[ "$edit" == true ]]; then 
			resetArgs
			psetup "3"
			return 0;
		fi

		case "$1" in
			"1")

				if ! [ -x "$(command -v jq)" ]; then
					psetup "5"
					return 3
				fi

				if [ ! -d "$cfgd" ]; then
					echo $(gettext -e "PMGR_MSG_DIR_NO")	#Directorys not found
					read -p "$(gettext -e "PMGR_MSG_DIR_C_Q")" -n 1 -r	#Do you wan't to create them
					if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY =~ ^[Jj]$ ]] ; then
						echo
						echo $(gettext -e "PMGR_MSG_DIR_C") #Creating Directorys
						psetup "4"
					elif [[ $REPLY =~ ^[Nn]$ ]]; then
						echo
						echo $(gettext -e "PMGR_MSG_SET_SKIP") #Setup Skipped
						sleep 2
						clear
						return 3;
					else
						echo
						echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
						sleep 2
						clear
						return 3;
					fi
				fi

				if [ -f "$cfgf" ]; then
					psetup "2"
				else
					echo $(gettext -e "PMGR_MSG_CFG_NO") #Config file not found
					echo $(gettext -e "PMGR_MSG_CFG_C") #Creating new Config:
					read -p "$(gettext -e "PMGR_MSG_CFG_C_D_Q")" -n 1 -r
					if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY =~ ^[Jj]$ ]]; then
						echo
						echo $(gettext -e "PMGR_MSG_CFG_C_E") #Creating default Config, please edit and set youre Values with pmgr -s -e
						touch "$cfgf"
						{
							echo '{'
							echo '	"GH_Token": "",'
    						echo '	"GH_User": "",'
    						echo '	"version": "2.5.15",'
    						echo '	"projectdir":' ''"$HOME"'/$PMGR_PATH_DOC/Projects",'
    						echo '	"maineditor": "code",'
    						echo '	"secondaryeditor": "subl"'
							echo '}'
						} >> "$cfgf"
						echo $(gettext -e "PMGR_MSG_CFG_DONE") #Config Setup Done...
						sleep 3
						clear
					elif [[ $REPLY =~ ^[Nn]$ ]]; then
						echo
						echo $(gettext -e "PMGR_MSG_CFG_C_U") #Creating User Guided Config:
						echo
						read -p "$(gettext -e "PMGR_MSG_CFG_DIR_Q")" -r
						echo "$(gettext -e "PMGR_MSG_CFG_DIR") $REPLY" #Setting Project Dir to: $REPLY
						local pdir="$REPLY"
						read -p "$(gettext -e "PMGR_MSG_CFG_USR_Q")" -r
						echo "$(gettext -e "PMGR_MSG_CFG_USR") $REPLY" #Github Username set to $REPLY
						local uname="$REPLY"
						read -p "$(gettext -e "PMGR_MSG_CFG_TKN_Q")" -r
						echo "$(gettext -e "PMGR_MSG_CFG_TKN") $REPLY" #Github Token set to $REPLY
						local token="$REPLY"
						echo $(gettext -e "PMGR_MSG_CFG_MEDIT_Q") #Which Editor do you wan't to use as main Editor?
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_CODE") #[1] VSCode
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_SUBL") #[2] Sublime
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_ATOM") #[3] Atom
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_VIM") #[4] VIM
						read -p "$(gettext -e "PMGR_MSG_CFG_EDIT_SET_Q")"
						case $REPLY in
							"1") local medit="code";;
							"2") local medit="subl";;
							"3") local medit="atom";;
							"4") local medit="vim";;
							*) 
								echo
								echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
								sleep 2
								clear
						esac
						echo "$(gettext -e "PMGR_MSG_CFG_MEDIT") $REPLY" #Maineditor set to $REPLY
						echo $(gettext -e "PMGR_MSG_CFG_SEDIT_Q") #Which Editor do you wan't to use as Secondary Editor?
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_CODE") #[1] VSCode
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_SUBL") #[2] Sublime
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_ATOM") #[3] Atom
						echo $(gettext -e "PMGR_MSG_CFG_EDIT_VIM") #[4] VIM
						read -p "$(gettext -e "PMGR_MSG_CFG_EDIT_SET_Q")"
						case $REPLY in
							"1") local sedit="code";;
							"2") local sedit="subl";;
							"3") local sedit="atom";;
							"4") local sedit="vim";;
							*) 
								echo
								echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
								sleep 2
								clear
						esac
						echo "$(gettext -e "PMGR_MSG_CFG_SEDIT") $REPLY" #Secondary Editor set to $REPLY
						echo $(gettext -e "PMGR_MSG_CFG_WRITE") #Writing Config...
						touch "$cfgf"
						{
							echo '{'
							echo '	"GH_Token":' '"'"$token"'"'','
    						echo '	"GH_User":' '"'"$uname"'"'','
    						echo '	"version": "2.5.15",'
    						echo '	"projectdir":' '"'"$pdir"'",'
    						echo '	"maineditor":' '"'"$medit"'",'
    						echo '	"secondaryeditor:' '"'"$sedit"'"'
							echo '}'
						} >> "$cfgf"
						echo $(gettext -e "PMGR_MSG_CFG_DONE") #Config Setup Done...
						sleep 3
						clear
						psetup "0"
					else		
						echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
						sleep 2
						clear
						return 3;
					fi		
				fi
				;;
			"2")
					projectdir="$( jq -r '.projectdir' "$cfgf" )"
					GH_User="$( jq -r '.GH_User' "$cfgf" )"
					GH_Token="$( jq -r '.GH_Token' "$cfgf" )"
					version="$( jq -r '.version' "$cfgf" )"
					maineditor="$( jq -r '.maineditor' "$cfgf" )"
					secondaryeditor="$( jq -r '.secondaryeditor' "$cfgf" )"
					setup=true
					;;
			"3")
				if [ -f "$cfgf" ]; then
					local cur_dir="$(pwd)"
					cd "$cfgd"
					$secondaryeditor config.json
					cd $cur_dir
				else
					psetup "1"
				fi
			;;
			"4")
				mkdir -p "$cfgd"
				echo $(gettext -e "PMGR_MSG_DIR_DONE") #Directory creation done
				psetup "1";;
			"5")
				echo $(gettext -e "PMGR_MSG_DEP_JQ") #Pmgr needed dependency jq not installed
				read -p "$(gettext -e "PMGR_MSG_DEP_JQ_Q")" -n 1 -r
				if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY =~ ^[Jj]$ ]]; then
					echo
					echo $(gettext -e "PMGR_MSG_DEP_JQ_INST") #Installing jq
					sudo apt-get install jq -y
					psetup "1"
				elif [[ $REPLY =~ ^[Nn]$ ]]; then
					echo
					echo $(gettext -e "PMGR_MSG_SET_SKIP") #Setup Skipped
					sleep 2
					clear
					return 3
				else
					echo
					echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
					sleep 2
					clear
					return 3
				fi
				;;
			*)
				echo $(gettext -e "PMGR_MSG_ARG_INV");; #Given Arguments $@ invalid
		esac
		resetArgs
	}

	########################################
	###Function for Interpreting Arguments##
	########################################
	function ReadArgs() {
		#TODO: Read all Arguments - Interpret them is respective Order and run the needed Functions

		local ind=0
		local args

		##Check if None Argument is passed then provide helpdesk otherwise get Arguments
		if [[ -z $@ ]]; then
			pinf ""
		fi

		##Populate args array with given Arguments
		for i in "$@"
		do
			args+=($i)
		done

		#Iterate Args array and do what needs to be done based on Args
		for i in "${args[@]}"
		do
			case $i in
				"-c"|"--create")
					if [[ -z ${args[$i+1]} ]]; then
						echo "No Arguments given for PROJECTNAME"				#TODO: Localize
					else
						case ${args[$i+2]} in
							"-n"|"--noout")
								quiet=true;;
							"-p"|"--public")
								priv=false;;
							"")					#No Argument
								;;
							*)					#Some Unknown Arument
								echo "Unknown Argument ${args[$i+2]}";;
						esac
						pcreate "${args[$i+1]}"
					fi;;
				"-o"|"--open")
					if [[ -z ${args[$i+1]} ]]; then
						echo "No Arguments given for PROJECTNAME"				#TODO: Localize
					else		
						popen "${args[$i+1]}"
					fi;;
				"-l"|"--list")	
					if [[ -z ${args[$i+1]} ]]; then	
						plist ""
					else
						echo "To many Arguments given for LIST"					#Todo: Localize
					fi;;
				"-r"|"--remove")
					if [[ -z ${args[$i+1]} ]]; then
						echo "No Arguments given for PROJECTNAME"				#TODO: Localize
					else	
						prem "${args[$i+1]}"
					fi;;
				"-s"|"--setup")
					if [[ -z ${args[$i+1]} ]]; then	
						case ${args[$i+2]} in
							"-e"|"--edit")
								edit=true;;
							"")
								;;
							*)
								echo "Unknown Argument ${args[$i+2]}";;
						esac
						psetup "1"
					else
						echo "To many Arguments given for SETUP"					#Todo: Localize
					fi;;
				"-v"|"--version")	
					if [[ -z ${args[$i+1]} ]]; then	
						pinf "version"
					else
						echo "To many Arguments given for VERSION"					#Todo: Localize
					fi;;
				"-u"|"--update")
					if [[ -z ${args[$i+1]} ]]; then		
						pupd ""
					else
						echo "To many Arguments given for UPDATE"					#Todo: Localize
					fi;;
				"-dbg")				
					pdbg "" "$3";;
				"-code")
					pcode "";;
				"-trial") #Get Argument Parameters
					if [[ ! -z ${args[$i+1]} ]]; then
						echo ${args[$i+1]}
					else
						echo "No Parameters passed to Argument -trial"
					fi;;
				"")
					;;
				*)
					echo "Unknown Argument ${args[$i]}"
			esac
			((ind++))
		done

	}

	###########################
	##Defining Base Functions##
	###########################

	##Creating new Project from Scratch * -c | --create
	function pcreate() {

		local cur_dir="$(pwd)"

		if [[ "$quiet" == true ]]; then
			(
			cd $projectdir
			curl -H "Authorization: token $GH_Token" https://api.github.com/user/repos -d '{"name": "'$1'","private": '$priv'}'
			git init $1
			cd $1		
			touch README.md
			git add README.md
			git commit -m "Initial Commit"
			git branch -M master
			git remote add origin git@github.com:$GH_User/$1.git
			git push -u origin master
			smerge .
			$maineditor .
			cd $cur_dir
			) >/dev/null 2>&1
		else
			cd $projectdir
			curl -H "Authorization: token $GH_Token" https://api.github.com/user/repos -d '{"name": "'$1'","private": '$priv'}'
			git init $1
			cd $1		
			touch README.md
			git add README.md
			git commit -m "Initial Commit"
			git branch -M master
			git remote add origin git@github.com:$GH_User/$1.git
			git push -u origin master
			smerge .
			$maineditor .
			cd $cur_dir
		fi	

		resetArgs
	
	}

	##Opening existing Project * -o | --open
	function popen() {
		#TODO if $2 is empty then do not try to create Project because name is missing
		if [[  ! -z $1 ]]; then
			cd
			if [ ! -d "$projectdir/$1" ]; then
				local cid
				cid=$(curl -s -H "Authorization: token $GH_Token" https://api.github.com/repos/"$GH_User"/"$1" | jq -r .id)
				if [[ $cid == null ]]; then
					echo
					echo $(gettext -e "PMGR_MSG_PRJ_NO") #Project $1 does not exist
					echo 
					read -p "$(gettext -e "PMGR_MSG_PRJ_C_Q")" -n 1 -r
					if [[ $REPLY =~ ^[Yy]$ ]]; then
						echo "$(gettext -e "PMGR_MSG_PRJ_C") $1" #Creating new Project $1
						pcreate $1
					elif [[ $REPLY =~ ^[Nn]$ ]]; then
						echo
						echo $(gettext -e "PMGR_MSG_INP_SKIP") #Skipping...
						sleep 2
						clear
					else		
						echo
						echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
					fi
				else
					echo
					echo $(gettext -e "PMGR_MSG_PRJ_REM") #Project does exist remotely
					echo
					read -p "$(gettext -e "PMGR_MSG_PRJ_REM_Q")" -n 1 -r
					if [[ $REPLY =~ ^[Yy]$ ]]; then
						echo
						echo $(gettext -e "PMGR_MSG_PRJ_REM_GET") #Cloning Repository from Git
						cd $projectdir
						mkdir $1
						git clone https://$GH_User:$GH_Token@github.com/$GH_User/$1.git
						cd $projectdir/$1
						smerge .
						$maineditor .
					elif [[ $REPLY =~ ^[Nn]$ ]]; then
						echo
						echo $(gettext -e "PMGR_MSG_INP_SKIP") #Skipping...
						sleep 2
						clear
					else		
						echo
						echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
					fi
				fi
			else
				echo "$(gettext -e "PMGR_MSG_PRJ_OPN") $1" #Opening $1
				cd "$projectdir/$1"
				smerge .
				$maineditor .
			fi
		else
			echo $(gettext -e "PMGR_MSG_PRJ_NAME_NO") #No Project name given...
			echo $(gettext -e "PMGR_MSG_INP_SKIP") #Skipping...
			sleep 2
			clear
		fi

		resetArgs

	}

	##List all existing Projects * -l | --list
	function plist () {
		echo $(gettext -e "PMGR_MSG_PRJ_CUR") #Current Projects:
		local cur_dir="$(pwd)"
		cd $projectdir
		ls -D
		cd $cur_dir

		resetArgs

	}

	##Removes Project * -r | --remove
	function prem () {
		local cur_dir="$(pwd)"
		
		if [[ -d "$projectdir/$1" ]]; then
			read -p "Do you really want to remove $1 (y/n)" -n 1 -r
				if [[ $REPLY =~ ^[Yy]$ ]]; then
					echo
					echo "$(gettext -e "PMGR_MSG_PRJ_DEL") $1" #Deleting Project $1
					echo $(gettext -e "PMGR_MSG_PRJ_DEL_L") #Removing  Repository...
					cd $projectdir
					rm -r -d -f $1
					cd $cur_dir
					#Give respone if delete was successfull maybe with exit code ? 
					echo $(gettext -e "PMGR_MSG_PRJ_DEL_REM") #Removing Remote Repository...
					curl -X DELETE -H "Authorization: token $GH_Token" https://api.github.com/repos/"$GH_User"/"$1"
				elif [[ $REPLY =~ ^[Nn]$ ]]; then
					echo
					echo $(gettext -e "PMGR_MSG_INP_SKIP") #Skipping...
					clear
				else		
					echo
					echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
				fi				
		else
			echo $(gettext -e "PMGR_MSG_PRJ_NO") #Project $1 does not exist
		fi


		resetArgs

	}

	##Info Function gives all Information about the ProjectManager
	function pinf () {
		case "$1" in
			"version")
				echo "$(gettext -e "PMGR_MSG_VER") $version";; #ProjectManager by FAO_Spikey version: $version
			
			*)	echo
				echo $(gettext -e "PMGR_MSG_INF_CALL") #Call: pmgr [ARG1]... [Project]... [ARG2]
				echo $(gettext -e "PMGR_MSG_INF") #Project Manager to create, list and delete Projects you are working on - git inclusive \n  ARG1:
				echo $(gettext -e "PMGR_MSG_INF_C") #	-c, --create 		Creates a new Project in Projects folder
				echo $(gettext -e "PMGR_MSG_INF_O") #	-o, --open 		Opens Project from Project folder
				echo $(gettext -e "PMGR_MSG_INF_L") #	-l, --list 		Lists all available Projects
				echo $(gettext -e "PMGR_MSG_INF_R") #	-r, --remove 		Deletes a Project
				echo $(gettext -e "PMGR_MSG_INF_V") #	-v, --version		Shows Version and Copyright information
				echo $(gettext -e "PMGR_MSG_INF_U") #	-u, --update 		Searches for Updates
				echo $(gettext -e "PMGR_MSG_INF_S") #	-s, --setup 		Setup function to create or edit Config
				echo $(gettext -e "PMGR_MSG_INF_H") #  	--help 			Shows this Help dialog
				echo "-code 			Edit PMGR Source (only in Developer Version)" #  	-code 			Edit PMGR Source (only in Developer Version)
				echo
				echo $(gettext -e "PMGR_MSG_INF_ARG") #ARG2:
				echo $(gettext -e "PMGR_MSG_INF_N") #	-n, --noout		Quiet Mode
				echo $(gettext -e "PMGR_MSG_INF_P") #	-p, --public 	Creates public Git repository instead of private
				echo $(gettext -e "PMGR_MSG_INF_E") #	-e, --edit 		Edits the Config, usage only in combination with -s
				echo ;;
		esac
	}

	#Update Function for Updating the Project Manager to the latest version
	function pupd () {
		echo "Checking for Updates..."			#TODO: Localize
		local cur_dir="$(pwd)"
		local rversion

		function vercomp () {
		    if [[ $1 == $2 ]]
		    then
		        return 0
		    fi
		    local IFS=.
		    local i ver1=($1) ver2=($2)
		    # fill empty fields in ver1 with zeros
		    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
		    do
		        ver1[i]=0
		    done
		    for ((i=0; i<${#ver1[@]}; i++))
		    do
		        if [[ -z ${ver2[i]} ]]
		        then
		            # fill empty fields in ver2 with zeros
		            ver2[i]=0
		        fi
		        if ((10#${ver1[i]} > 10#${ver2[i]}))
		        then
		            return 1
		        fi
		        if ((10#${ver1[i]} < 10#${ver2[i]}))
		        then
		            return 2
		        fi
		    done
		    return 0
		}

		#TODO: Get config.json from git repository to tmp folder and read version info from it
		cd /tmp
		(wget --no-check-certificate --content-disposition "https://raw.githubusercontent.com/Kartoffel096/ProjectManager/main/config.json") >/dev/null 2>&1
		sleep 1
		if [ -f "config.json" ]; then
			rversion="$( jq -r '.version' "/tmp/config.json" )"	
		else
			echo "Oops something wen't wrong - Config.json not found"
		fi
		if [ -f "config.json" ]; then rm config.json 
		fi

		#Check Git for Version and compare to Version in current config if git version is newer then ask user to download new version else do nothing
		vercomp $rversion $version
	    case $? in
	        0) #Equal Version
				echo "No Updates found you are up to date";;		#TODO: Localize
	        1) #remote newer
				echo "Update found, Current Version: $version ;New Version: $rversion"		#TODO: Localize
				read -p "$(gettext -e "PMGR_MSG_UPD_NEW")" -n 1 -r
				if [[ $REPLY =~ ^[YyJj]$ ]]; then
					echo
					echo $(gettext -e "PMGR_MSG_UPD_SU") #This action requires Sudo
					curl -sL https://github.com/Kartoffel096/ProjectManager/archive/main.tar.gz | tar xz
					cd "ProjectManager-main"
					sudo cp patchnotes /tmp/patchnotes
					sudo cp pmgr /bin/pmgr
					sudo chmod +x /bin/pmgr
					rm "$cfgf"
					{
						echo '{'
						echo '	"GH_Token":' '"'"$GH_Token"'"'','
    					echo '	"GH_User":' '"'"$GH_User"'"'','
    					echo '	"version":' '"'"$rversion"'",'
    					echo '	"projectdir":' '"'"$projectdir"'",'
    					echo '	"maineditor":' '"'"$maineditor"'",'
    					echo '	"secondaryeditor":' '"'"$secondaryeditor"'"'
						echo '}'
					} >> "$cfgf"
					cd /tmp
					rm -r -d -f "ProjectManager-main"
					version="$( jq -r '.version' "$cfgf" )"
					echo "$(gettext -e "PMGR_MSG_UPD_DONE") $version" #Updated to version $version 		TODO: Fix Message
					
					###Show Patchnotes
					read -p "Show Patchnotes? [Y/N]" -n 1 -r						#TODO: Localize
					if [[ $REPLY =~ ^[YyJj]$ ]]; then
						echo "Patchnotes:"
						echo
						while IFS= read -r line; do
							echo "$line"
						done < /tmp/patchnotes
						sudo rm /tmp/patchnotes
					elif [[ $REPLY =~ ^[Nn]$ ]]; then
						sudo rm /tmp/patchnotes
						return 0
					else
						sudo rm /tmp/patchnotes
						return 0
					fi
					###
					return 0
				elif [[ $REPLY =~ ^[Nn]$ ]]; then
					echo
					echo $(gettext -e "PMGR_MSG_UPDATE_NO") #Not Updating
					echo $(gettext -e "PMGR_MSG_INP_SKIP") #Skipping...
					sleep 2
					clear
					return 3
				else
					echo
					echo $(gettext -e "PMGR_MSG_INP_INV") #Invalid input \n Skipping...
					echo $(gettext -e "PMGR_MSG_INP_SKIP") #Skipping...
					sleep 2
					clear
					return 3
				fi;;
	        2) #local newer
				;;
	    esac
		cd $cur_dir
		return 2
	}

	
	#Debug Function
	function pdbg () {
		##Debug Function for testing different stuff

		#This will store all listed Projects in 1 Variable --> Later use for Autocompletion ;; TODO: MAKE AN AUTOCOMPLETION!
		cd $projectdir
		local list=$(ls -D)
		echo $list

	}

	#Function for editing this File
	function pcode () {
		cd /usr/bin
		echo "Creating Backup File pmgr.bck in /usr/bin/"
		sudo cp pmgr pmgr.bck
		code pmgr
	}
	####################
	##End Base Defines##
	####################
	
	##########################
	##Calling Main Functions##
	##########################

	psetup "1"		#CHeck for Dependencys and Integrity of Files
	pupd 			#Checking for Updates at Startup 		TODO: Make Config entry to enable/disable Update Checking

	if [[ "$?" == 0 ]]; then
		return 0
	fi

	if [[ "$setup" == "true" ]]; then	#If Integrity check is allright then Get Arguments and Start PMGR
		
		ReadArgs $@

		#case "$1" in
			#"-c"|"--create")
			#	pcreate "$2";;
			#"-o"|"--open")		
			#	popen "$2";;
			#"-l"|"--list")		
			#	plist "$2";;
			#"-r"|"--remove")	
			#	prem "$2";;
			#"-s"|"--setup")
			#	psetup "1";;
			#"-v"|"--version")	
			#	pinf "version";;
			#"-u"|"--update")	
			#	pupd "";;
			#"-dbg")				
			#	pdbg "" "$3";;
			#"-code")
			#	pcode "";;
			#*)					
			#	pinf "";;
		#esac
	else
		return 3
	fi

	#####################################################
}

pmgr $@		#Entry Point for Running this Script
